package com.DC.pageobjects.adc.execute.productManager.properties;

import com.DC.pageobjects.adc.navigationMenus.InsightsNavigationMenu;
import com.DC.utilities.apiEngine.models.responses.productVersioning.CompanyPropertiesBase;
import com.DC.utilities.enums.Enums;
import com.DC.utilities.sharedElements.SingleSelectDropdown;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import java.util.LinkedHashMap;
import java.util.Map;

public class AddPropertyModal extends InsightsNavigationMenu {
    protected final String ADD_PROPERTY_MODAL_XPATH = "//div[@data-qa='AddPropertyPV']";
    protected final By PROPERTY_NAME_INPUT_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//div[child::span[text()='Name']]//input");
    protected final By PROPERTY_ID_INPUT_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//div[child::span[text()='ID']]//input");
    protected final By DATA_TYPE_DROPDOWN_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//div[child::span[text()='Data Type']]//button[@data-qa='Button']");
    protected final By PROPERTY_HELP_TEXT_INPUT_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//div[child::span[text()='Help Text']]//input");
    protected final By PROPERTY_GROUP_DROPDOWN_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//div[child::span[text()='Property Group']]//button[@data-qa='Button']");
    protected final By ADD_NEW_PROPERTY_GROUP_INPUT_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//input[@placeholder='Add New Property Group']");
    protected final By ALLOW_MULTIPLE_VALUES_CHECKBOX_LOCATOR = By.id("allowMultipleValues");
    protected final By ADD_BUTTON_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//button[text()='Add' and ancestor::div[@data-qa='InlineList']]");
    protected final By ADD_AND_CLOSE_BUTTON_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//button[text()='Add & Close']");
    protected final By CANCEL_BUTTON_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//button[text()='Cancel']");
    protected final By ADD_BUTTON_SPINNER_LOCATOR = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//button[text()='Add']//i");

    protected SingleSelectDropdown singleSelectDropdown;

    public AddPropertyModal(WebDriver driver) {
        super(driver);
        findElementVisibleMilliseconds(By.xpath(ADD_PROPERTY_MODAL_XPATH));
        singleSelectDropdown = new SingleSelectDropdown(driver);
    }

    public void insertPropertyName(String propertyName) {
        setText(PROPERTY_NAME_INPUT_LOCATOR, propertyName);
    }

    public String getAutoGeneratedPropertyId() {
        return getAttribute(PROPERTY_ID_INPUT_LOCATOR, "value");
    }

    public void selectDataType(String dataType) {
        singleSelectDropdown.openDropdownMenu(DATA_TYPE_DROPDOWN_LOCATOR);
        singleSelectDropdown.selectOption(dataType);
    }

    public void insertHelpText(String helpText) {
        setText(PROPERTY_HELP_TEXT_INPUT_LOCATOR, helpText);
    }

    public void selectGroup(String groupName) {
        singleSelectDropdown.openDropdownMenu(PROPERTY_GROUP_DROPDOWN_LOCATOR);
        singleSelectDropdown.selectOption(groupName);
    }

    public void addNewPropertyGroup(String groupName) {
        setText(ADD_NEW_PROPERTY_GROUP_INPUT_LOCATOR, groupName);
    }

    public void addNewPropertyGroupIfNotExistent(String groupName) throws InterruptedException {
        if (!isGroupInDropdownMenu(groupName)) {
            addNewPropertyGroup(groupName);
        }
    }

    public boolean isGroupInDropdownMenu(String groupName) {
        singleSelectDropdown.openDropdownMenu(PROPERTY_GROUP_DROPDOWN_LOCATOR);
        boolean groupNameExists = singleSelectDropdown.getDropdownOptions().contains(groupName);
        clickElement(PROPERTY_HELP_TEXT_INPUT_LOCATOR); // Workaround to close the dropdown menu
        return groupNameExists;
    }

    public void allowMultipleValues(boolean allowMultipleValues) {
        if (allowMultipleValues) {
            selectElement(ALLOW_MULTIPLE_VALUES_CHECKBOX_LOCATOR);
        } else {
            deselectElement(ALLOW_MULTIPLE_VALUES_CHECKBOX_LOCATOR);
        }
    }

    public void fillOutForm(CompanyPropertiesBase.PropertyBase propertySettings, boolean addGroupIfNotExistent) throws InterruptedException {
        insertPropertyName(propertySettings.name);
        selectDataType(propertySettings.type.getPropertyTypeForUI());
        insertHelpText(propertySettings.helpText);

        if (propertySettings.group != null) {
            if (addGroupIfNotExistent) {
                addNewPropertyGroupIfNotExistent(propertySettings.group);
            } else {
                selectGroup(propertySettings.group);
            }
        } else {
            propertySettings.group = propertySettings.type == Enums.PropertyType.DIGITAL_ASSET ? "Unassigned Digital Assets" : "Unassigned Properties";
        }

        if (propertySettings.type == Enums.PropertyType.DIGITAL_ASSET && propertySettings.mappingConfig != null) {
            var collectInWorkflowCheckbox = By.id("collectInWorkflow");
            var mappingConfigDropdown = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//div[child::span[text()='Mapping Config']]//button[@data-qa='Button']");
            selectElement(collectInWorkflowCheckbox);
            singleSelectDropdown.openDropdownMenu(mappingConfigDropdown);
            singleSelectDropdown.selectOption(propertySettings.mappingConfig);
        }

        allowMultipleValues(propertySettings.allowMultipleValues);

        propertySettings.id = getAutoGeneratedPropertyId();
    }

    public void clickAddButton() {
        clickElement(ADD_BUTTON_LOCATOR);
    }

    public void clickAddAndCloseButton() {
        clickElement(ADD_AND_CLOSE_BUTTON_LOCATOR);
    }

    public <T> T createPropertyAndCloseModal(CompanyPropertiesBase.PropertyBase propertySettings, boolean addGroupIfNotExistent, Class<T> pageClass) throws InterruptedException {
        fillOutForm(propertySettings, addGroupIfNotExistent);
        clickElement(ADD_AND_CLOSE_BUTTON_LOCATOR);
        waitForElementToBeInvisible(ADD_AND_CLOSE_BUTTON_LOCATOR);
        return getPage(pageClass);
    }

    public AddPropertyModal createProperty(CompanyPropertiesBase.PropertyBase propertySettings, boolean addGroupIfNotExistent) throws InterruptedException {
        fillOutForm(propertySettings, addGroupIfNotExistent);
        clickElement(ADD_BUTTON_LOCATOR);
        return waitForSpinnerToDisappear();
    }

    public <T> T addProperties(LinkedHashMap<CompanyPropertiesBase.PropertyBase, Boolean> propertiesToAdd, Class<T> pageClass) throws InterruptedException {
        for (Map.Entry<CompanyPropertiesBase.PropertyBase, Boolean> property : propertiesToAdd.entrySet()) {
            createProperty(property.getKey(), property.getValue());
        }
        clickElement(CANCEL_BUTTON_LOCATOR);
        return getPage(pageClass);
    }

    public <T> T cancelCreatingAProperty(Class<T> pageClass) {
        waitForSpinnerToDisappear();
        clickElement(CANCEL_BUTTON_LOCATOR);
        return getPage(pageClass);
    }

    public boolean isErrorDisplayedForDuplicateProperty(String propertyName) {
        By errorLocator = By.xpath(ADD_PROPERTY_MODAL_XPATH + "//div[@role='alert']//span[contains(text(),'" + "\"" + propertyName + "\"" + " already exists')]");
        return isElementVisible(errorLocator, MAX_WAIT_TIME_SECS);
    }

    public AddPropertyModal waitForSpinnerToDisappear() {
        waitForElementToBeInvisible(ADD_BUTTON_SPINNER_LOCATOR, MAX_WAIT_TIME_SECS);
        return this;
    }

}
